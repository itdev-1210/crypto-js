<wiki:toc/>

= Changes =

* Progressive processing.
* More compatible with existing implementations.
* More adaptable to new and varied implementations.
* Better architecture under the hood.
* Faaaster.

= Quick-start Guide =

    == Hashers ==

        === The Algorithms ===

            ==== MD5 ====

            MD5 is a widely used hash function. It's been used in a variety of security applications and is also commonly used to check the integrity of files. Though, MD5 is not collision resistant, and it isn't suitable for applications like SSL certificates or digital signatures that rely on this property.

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/md5.js"></script>
            <script>
                var hash = CryptoJS.MD5("Message");
            </script>
            }}}

            ==== SHA-1 ====

            The SHA hash functions were designed by the National Security Agency (NSA). SHA-1 is the most established of the existing SHA hash functions, and it's used in a variety of security applications and protocols. Though, SHA-1's collision resistance has been weakening as new attacks are discovered or improved.

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/sha1.js"></script>
            <script>
                var hash = CryptoJS.SHA1("Message");
            </script>
            }}}

            ==== SHA-256 ====

            SHA-256 is one of the three variants in the SHA-2 set. It isn't as widely used as SHA-1, though it appears to provide much better security.

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/sha256.js"></script>
            <script>
                var hash = CryptoJS.SHA256("Message");
            </script>
            }}}

        === The Input ===

        The hash algorithms accept either strings or instances of CryptoJS.lib.WordArray. A WordArray object represents an array of 32-bit words. When you pass a string, it's automatically converted to a WordArray encoded as UTF-8.

        === The Output ===

        The hash you get back isn't a string yet. It's a WordArray object. When you use a WordArray object in a string context, it's automatically converted to a hex string.

        {{{
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/sha256.js"></script>
        <script>
            var hash = CryptoJS.SHA256("Message");

            alert(typeof hash); // object

            alert(hash); // 2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91
        </script>
        }}}

        You can convert a WordArray object to other formats by explicitly calling the toString method and passing an encoder.

        {{{
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/sha256.js"></script>
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/components/enc-base64.js"></script>
        <script>
            var hash = CryptoJS.SHA256("Message");

            alert(hash.toString(CryptoJS.enc.Base64)); // L3dmip37+NWEi57rSnFFypTG7ZI25Kdz9tyvpRMrL5E=

            alert(hash.toString(CryptoJS.enc.Latin1)); // /wf��ûøÕ���ëJqEÊ�Æí�6ä§söÜ¯¥+/�

            alert(hash.toString(CryptoJS.enc.Hex)); // 2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91
        </script>
        }}}

        === Progressive Hashing ===

        {{{
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/sha256.js"></script>
        <script>
            var sha256 = CryptoJS.algo.SHA256.create();

            sha256.update("Message Part 1");
            sha256.update("Message Part 2");
            sha256.update("Message Part 3");

            var hash = sha256.finalize();
        </script>
        }}}

    == HMAC ==

    Keyed-hash message authentication codes (HMAC) is a mechanism for message authentication using cryptographic hash functions.

    HMAC can be used in combination with any iterated cryptographic hash function.

    {{{
    <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/hmac-md5.js"></script>
    <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/hmac-sha1.js"></script>
    <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/hmac-sha256.js"></script>
    <script>
        var hash = CryptoJS.HmacMD5("Message", "Secret Passphrase");
        var hash = CryptoJS.HmacSHA1("Message", "Secret Passphrase");
        var hash = CryptoJS.HmacSHA256("Message", "Secret Passphrase");
    </script>
    }}}

        === Progressive Hashing ===

        {{{
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/hmac-sha256.js"></script>
        <script>
            var hmac = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, "Secret Passphrase");

            hmac.update("Message Part 1");
            hmac.update("Message Part 2");
            hmac.update("Message Part 3");

            var hash = hmac.finalize();
        </script>
        }}}

    == PBKDF2 ==

    PBKDF2 is a password-based key derivation function. In many applications of cryptography, user security is ultimately dependent on a password, and because a password usually can't be used directly as a cryptographic key, some processing is required.

    A salt provides a large set of keys for any given password, and an iteration count increases the cost of producing keys from a password, thereby also increasing the difficulty of attack.

    {{{
    <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/pbkdf2.js"></script>
    <script>
        var salt = CryptoJS.lib.WordArray.random(128/8);

        var key128Bits = CryptoJS.PBKDF2("Secret Passphrase", salt, { keySize: 128/32 });
        var key256Bits = CryptoJS.PBKDF2("Secret Passphrase", salt, { keySize: 256/32 });
        var key512Bits = CryptoJS.PBKDF2("Secret Passphrase", salt, { keySize: 512/32 });

        var key512Bits1000Iterations = CryptoJS.PBKDF2("Secret Passphrase", salt, { keySize: 512/32, iterations: 1000 });
    </script>
    }}}

    == Ciphers ==

        === The Algorithms ===

            ==== AES ====

            The Advanced Encryption Standard (AES) is a U.S. Federal Information Processing Standard (FIPS). It was selected after a 5-year process where 15 competing designs were evaluated.

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/aes.js"></script>
            <script>
                var encrypted = CryptoJS.AES.encrypt("Message", "Secret Passphrase");

                var decrypted = CryptoJS.AES.decrypt(encrypted, "Secret Passphrase");
            </script>
            }}}

            ==== DES, Triple DES ====

            DES is a previously dominant algorithm for encryption and was published as an official Federal Information Processing Standard (FIPS). DES is now considered to be insecure due to the small key size.

            Triple DES applies DES three times to each block to increase the key size. The algorithm is believed to be secure in this form.

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/tripledes.js"></script>
            <script>
                var encrypted = CryptoJS.TripleDES.encrypt("Message", "Secret Passphrase");

                var decrypted = CryptoJS.TripleDES.decrypt(encrypted, "Secret Passphrase");
            </script>
            }}}

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/tripledes.js"></script>
            <script>
                var encrypted = CryptoJS.DES.encrypt("Message", "Secret Passphrase");

                var decrypted = CryptoJS.DES.decrypt(encrypted, "Secret Passphrase");
            </script>
            }}}

            ==== Rabbit ====

            Rabbit is a high-performance stream cipher and a finalist in the eSTREAM Portfolio. It is one of the four designs selected after a 3 1/2-year process where 22 designs were evaluated.

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/rabbit.js"></script>
            <script>
                var encrypted = CryptoJS.Rabbit.encrypt("Message", "Secret Passphrase");

                var decrypted = CryptoJS.Rabbit.decrypt(encrypted, "Secret Passphrase");
            </script>
            }}}

            ==== RC4 ====

            RC4 is a widely-used stream cipher. It's used in popular protocols such as SSL and WEP. Although remarkable for its simplicity and speed, the algorithm's history doesn't inspire confidence in its security.

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/rc4.js"></script>
            <script>
                var encrypted = CryptoJS.RC4.encrypt("Message", "Secret Passphrase");

                var decrypted = CryptoJS.RC4.decrypt(encrypted, "Secret Passphrase");
            </script>
            }}}

            It was discovered that the first few bytes of keystream are strongly non-random, and leak information about the key. We can defend against this attack by discarding the initial portion of the keystream. This modified algorithm is traditionally called RC4-drop.

            By default, 192 words (768 bytes) are dropped, but you can configure the algorithm to drop any number of words.

            {{{
            <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/rc4.js"></script>
            <script>
                var encrypted = CryptoJS.RC4Drop.encrypt("Message", "Secret Passphrase");

                var encrypted = CryptoJS.RC4Drop.encrypt("Message", "Secret Passphrase", { drop: 3072/4 });

                var decrypted = CryptoJS.RC4Drop.decrypt(encrypted, "Secret Passphrase", { drop: 3072/4 });
            </script>
            }}}

        === Custom Key and IV ===

        {{{
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/aes.js"></script>
        <script>
            var key = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');
            var iv = CryptoJS.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');

            var encrypted = CryptoJS.AES.encrypt("Message", key, { iv: iv });
        </script>
        }}}

        === Block Modes and Padding ===

        {{{
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/aes.js"></script>
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/components/mode-cfb.js"></script>
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/components/pad-ansix923.js"></script>
        <script>
            var encrypted = CryptoJS.AES.encrypt("Message", "Secret Passphrase", { mode: CryptoJS.mode.CFB, padding: CryptoJS.pad.AnsiX923 });
        </script>
        }}}

        CryptoJS supports the following modes:

        * CBC (the default)
        * CFB
        * CTR
        * OFB
        * ECB

        And CryptoJS supports the following padding schemes:

        * Pkcs7 (the default)
        * Iso97971
        * AnsiX923
        * Iso10126
        * ZeroPadding
        * NoPadding

        === The Input ===

        For the plaintext message and the key, the cipher algorithms accept either strings or instances of CryptoJS.lib.WordArray. A WordArray object represents an array of 32-bit words. When you pass a string, it's automatically converted to a WordArray encoded as UTF-8.

        For the ciphertext, the cipher algorithms accept either strings or instances of CryptoJS.lib.CipherParams. A CipherParams object represents a collection of parameters such as the IV, a salt, and the raw ciphertext itself. When you pass a string, it's automatically converted to a CipherParams object according to a format strategy.

        === The Output ===

        The plaintext you get back after decryption is a WordArray object. See Hasher's Output for more detail.

        The ciphertext you get back after encryption isn't a string yet. It's a CipherParams object. When you use a CipherParams object in a string context, it's automatically converted to a string according to a format strategy. The default is an OpenSSL-compatible format.

        You can define your own formats in order to be compatible with other crypto implementations. A format is an object with two methods, stringify and parse, that converts between CipherParams objects and ciphertext strings.

        Here's how you might write a JSON formatter:

        {{{
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/aes.js"></script>
        <script>
            var JsonFormatter = {
                stringify: function (cipherParams) {
                    var o = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) };
                    if (cipherParams.iv) {
                        o.iv = cipherParams.iv.toString();
                    }
                    if (cipherParams.salt) {
                        o.s = cipherParams.salt.toString();
                    }

                    return JSON.stringify(o);
                },

                parse: function (jsonStr) {
                    var o = JSON.parse(jsonStr);

                    var cipherParams = CryptoJS.lib.CipherParams.create({
                        ciphertext: CryptoJS.enc.Base64.parse(o.ct)
                    });
                    if (o.iv) {
                        cipherParams.iv = CryptoJS.enc.Hex.parse(o.iv)
                    }
                    if (o.s) {
                        cipherParams.salt = CryptoJS.enc.Hex.parse(o.s)
                    }

                    return cipherParams;
                }
            };

            var encrypted = CryptoJS.AES.encrypt("Message", "Secret Passphrase", { format: JsonFormatter });

            var decrypted = CryptoJS.AES.decrypt(encrypted, "Secret Passphrase", { format: JsonFormatter });
        </script>
        }}}

        === Progressive Ciphering ===

        {{{
        <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/rollups/aes.js"></script>
        <script>
            var key = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');
            var iv = CryptoJS.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');

            var aesEncryptor = CryptoJS.algo.AES.createEncryptor(key, { iv: iv });

            var ciphertextPart1 = aesEncryptor.process("Message Part 1");
            var ciphertextPart2 = aesEncryptor.process("Message Part 2");
            var ciphertextPart3 = aesEncryptor.process("Message Part 3");
            var ciphertextPart4 = aesEncryptor.finalize();

            var aesDecryptor = CryptoJS.algo.AES.createDecryptor(key, { iv: iv });

            var plaintextPart1 = aesDecryptor.process(ciphertextPart1);
            var plaintextPart2 = aesDecryptor.process(ciphertextPart2);
            var plaintextPart3 = aesDecryptor.process(ciphertextPart3);
            var plaintextPart4 = aesDecryptor.process(ciphertextPart4);
            var plaintextPart5 = aesDecryptor.finalize();
        </script>
        }}}

    == Encoders ==

    CryptoJS can convert from encoding formats such as Base64, Latin1 or Hex to WordArray objects and vica versa.

    {{{
    <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/components/core.js"></script>
    <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/components/enc-utf16.js"></script>
    <script src="http://crypto-js.googlecode.com/svn/tags/3.0-beta1/build/components/enc-base64.js"></script>
    <script>
        var words = CryptoJS.enc.Base64.parse('SGVsbG8sIFdvcmxkIQ==');
        var base64 = CryptoJS.enc.Base64.stringify(words);

        var words = CryptoJS.enc.Latin1.parse('Hello, World!');
        var latin1 = CryptoJS.enc.Latin1.stringify(words);

        var words = CryptoJS.enc.Hex.parse('48656c6c6f2c20576f726c6421');
        var hex = CryptoJS.enc.Hex.stringify(words);

        var words = CryptoJS.enc.Utf8.parse('𤭢');
        var utf8 = CryptoJS.enc.Utf8.stringify(words);

        var words = CryptoJS.enc.Utf16.parse('Hello, World!');
        var utf16 = CryptoJS.enc.Utf16.stringify(words);
    </script>
    }}}
